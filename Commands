            КОМАНДЫ:
python manage.py createsuperuser-"создание администратора"
python manage.py runserver-запуск сервера (отладочный веб сервер)
python manage.py migrate-создание миграций
python manage.py makemigrations- перенос миграций
python manage.py test - запуск тестов
django-admin startproject "НАЗВАНИЕ ПРОЕКТА" - создание проекта
python manage.py startapp("Name apps")
python manage.py sqlmigrate Site 0001
vim "example.py"-создание нового фвйла
pipenv install django - установка нового виртуального окружения для django
python manage.py createsuperuser - создание суперпользователя
            GIT
git config --global user.name "Your Name" # создание имени
git config --global user.email "yourname@email.com" # создание электронной почты
git pull
git commit
git push
git remote

1)git init - добавить, инициализировать GIT, создать новый GIT
2)git status - чтоб увидеть изменения
3)git add -A - добавление изменений в git
4)git commit -m 'initial commit' - отслеживание изменений
5)git checkout -b "название ветки" - создание новой ветки
6)git checkout master - переключение на ветку мастера

            ФАЙЛЫ
manage.py - файл для запуска локального сервера, для создания миграций
Программный файл с кодом одноименной служебной утилиты, выполняющей различные действия над проектом
используется для выполнения различных команд
Django, таких как запуск локального веб-сервера или создание нового приложения.

unit.py-характеристики сайта
пустой файл, сообщающий Python, что папка, в которой он находится, является полноценным пакетом;

wsgi, asgi-стандарт для обеспечения подключения (код не меняется), стандарт взаимодействия между Python прораммой,
выполняющийся на стороне сервера и самим веб сервером
Протоколы взаимодействия с сервером
Модули wsgi.py и asgi.py используются при публикации готового сайта в Ин­
тернетy

setting.py -глобальные настройки
Модуль с настройками самого проекта. Включает описание конфигурации базы данных проекта, пути ключевых папок, важные параметры,
связанные с безопасностью, и пр.;
    BASE DIR- полный путь к нашему проекту, для загрузки на сервер
    SECRET KEY-секретный ключ приложения("нельзя показывать")
    DEBUG-показ ошибок при загрузке сайта("Значение: True, False")
    ALLOWED_HOST-хосты на которых разрешены публикация сайтов(Значение:)
    INSTALLED_APPS-набор прилрожений со встроенными приложениями, регистрация приложения
    MIDDLEWARE-установленные плагины
    ROOT_URLCONF -какой файл urls.py будет использоваться для проекта(Значение:Rushan.urls.py)
    TEMPLATES -какие шаблоны используются внутри проекта
    DATABASE-указывается с какой бд мы работаем

urls.py-отслеживание URL адресов и сообщает Django какие
страницы для сборки выдать в ответ на запрос браузера

        ФАЙЛЫ ПРИЛОЖЕНИЯ
migration-хранение миграций, для описания структуры БД
отслеживает любые изменения в файле models.py чтобы синхронизировать
нашу базу данных с models.py

unit-описать функционал

admin.py-отображает файлы для панели администратора
файл конфигурации для встроенного приложения администратора Django

apps.py-глобальные настройки приложения
является конфигурационным файлом для самого приложения

model.py-модуль создание класса на основе которого создается табличка в БД
тут мы определяем наши модели базы данных, которые Django
автоматически переводит в таблицы базы данных

test.py-модуль для тестирования приложения (UNIT тесты)

views.py-модуль для хранения представлений "методы" при переходе пользователя на определенную страницу(Отслеживание через urls.py)
тут мы обрабатываем логику запроса / ответа для нашего веб-
приложения
    ПАПКИ:
templates-для хранения HTML
migrations-служит для создания БД



        IMPORT.FROM
from django.shortcuts import render-вывод HTML шаблонa


            Устанока
pip install Django - установка проекта Django

            Шаблонизатор Jinja
{% block content %}
{% endblock %}
{% include 'layout.html' %} -

